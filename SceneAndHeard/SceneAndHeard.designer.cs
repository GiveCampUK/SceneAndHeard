#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SceneAndHeard
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SceneCRM")]
	public partial class SceneAndHeardDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertChild(Child instance);
    partial void UpdateChild(Child instance);
    partial void DeleteChild(Child instance);
    partial void InsertVolunteerCapability(VolunteerCapability instance);
    partial void UpdateVolunteerCapability(VolunteerCapability instance);
    partial void DeleteVolunteerCapability(VolunteerCapability instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertCourseAttendance(CourseAttendance instance);
    partial void UpdateCourseAttendance(CourseAttendance instance);
    partial void DeleteCourseAttendance(CourseAttendance instance);
    partial void InsertCourseType(CourseType instance);
    partial void UpdateCourseType(CourseType instance);
    partial void DeleteCourseType(CourseType instance);
    partial void InsertCourseVolunteer(CourseVolunteer instance);
    partial void UpdateCourseVolunteer(CourseVolunteer instance);
    partial void DeleteCourseVolunteer(CourseVolunteer instance);
    partial void InsertCrbCheck(CrbCheck instance);
    partial void UpdateCrbCheck(CrbCheck instance);
    partial void DeleteCrbCheck(CrbCheck instance);
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    partial void InsertPlay(Play instance);
    partial void UpdatePlay(Play instance);
    partial void DeletePlay(Play instance);
    partial void InsertPlayVolunteer(PlayVolunteer instance);
    partial void UpdatePlayVolunteer(PlayVolunteer instance);
    partial void DeletePlayVolunteer(PlayVolunteer instance);
    partial void InsertProduction(Production instance);
    partial void UpdateProduction(Production instance);
    partial void DeleteProduction(Production instance);
    partial void InsertProductionVolunteer(ProductionVolunteer instance);
    partial void UpdateProductionVolunteer(ProductionVolunteer instance);
    partial void DeleteProductionVolunteer(ProductionVolunteer instance);
    partial void InsertTerm(Term instance);
    partial void UpdateTerm(Term instance);
    partial void DeleteTerm(Term instance);
    partial void InsertVolunteer(Volunteer instance);
    partial void UpdateVolunteer(Volunteer instance);
    partial void DeleteVolunteer(Volunteer instance);
    #endregion
		
		public SceneAndHeardDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SceneCRMConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SceneAndHeardDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SceneAndHeardDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SceneAndHeardDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SceneAndHeardDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Child> Childs
		{
			get
			{
				return this.GetTable<Child>();
			}
		}
		
		public System.Data.Linq.Table<VolunteerCapability> VolunteerCapabilities
		{
			get
			{
				return this.GetTable<VolunteerCapability>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<CourseAttendance> CourseAttendances
		{
			get
			{
				return this.GetTable<CourseAttendance>();
			}
		}
		
		public System.Data.Linq.Table<CourseType> CourseTypes
		{
			get
			{
				return this.GetTable<CourseType>();
			}
		}
		
		public System.Data.Linq.Table<CourseVolunteer> CourseVolunteers
		{
			get
			{
				return this.GetTable<CourseVolunteer>();
			}
		}
		
		public System.Data.Linq.Table<CrbCheck> CrbChecks
		{
			get
			{
				return this.GetTable<CrbCheck>();
			}
		}
		
		public System.Data.Linq.Table<Job> Jobs
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
		
		public System.Data.Linq.Table<Performance> Performances
		{
			get
			{
				return this.GetTable<Performance>();
			}
		}
		
		public System.Data.Linq.Table<Play> Plays
		{
			get
			{
				return this.GetTable<Play>();
			}
		}
		
		public System.Data.Linq.Table<PlayVolunteer> PlayVolunteers
		{
			get
			{
				return this.GetTable<PlayVolunteer>();
			}
		}
		
		public System.Data.Linq.Table<Production> Productions
		{
			get
			{
				return this.GetTable<Production>();
			}
		}
		
		public System.Data.Linq.Table<ProductionVolunteer> ProductionVolunteers
		{
			get
			{
				return this.GetTable<ProductionVolunteer>();
			}
		}
		
		public System.Data.Linq.Table<Term> Terms
		{
			get
			{
				return this.GetTable<Term>();
			}
		}
		
		public System.Data.Linq.Table<Volunteer> Volunteers
		{
			get
			{
				return this.GetTable<Volunteer>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Child")]
	public partial class Child : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChildId;
		
		private string _Reference;
		
		private string _FirstName;
		
		private string _Surname;
		
		private EntitySet<CourseAttendance> _CourseAttendances;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChildIdChanging(int value);
    partial void OnChildIdChanged();
    partial void OnReferenceChanging(string value);
    partial void OnReferenceChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    #endregion
		
		public Child()
		{
			this._CourseAttendances = new EntitySet<CourseAttendance>(new Action<CourseAttendance>(this.attach_CourseAttendances), new Action<CourseAttendance>(this.detach_CourseAttendances));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ChildId
		{
			get
			{
				return this._ChildId;
			}
			set
			{
				if ((this._ChildId != value))
				{
					this.OnChildIdChanging(value);
					this.SendPropertyChanging();
					this._ChildId = value;
					this.SendPropertyChanged("ChildId");
					this.OnChildIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reference", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string Reference
		{
			get
			{
				return this._Reference;
			}
			set
			{
				if ((this._Reference != value))
				{
					this.OnReferenceChanging(value);
					this.SendPropertyChanging();
					this._Reference = value;
					this.SendPropertyChanged("Reference");
					this.OnReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(64)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Child_CourseAttendance", Storage="_CourseAttendances", ThisKey="ChildId", OtherKey="ChildId")]
		public EntitySet<CourseAttendance> CourseAttendances
		{
			get
			{
				return this._CourseAttendances;
			}
			set
			{
				this._CourseAttendances.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseAttendances(CourseAttendance entity)
		{
			this.SendPropertyChanging();
			entity.Child = this;
		}
		
		private void detach_CourseAttendances(CourseAttendance entity)
		{
			this.SendPropertyChanging();
			entity.Child = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VolunteerCapability")]
	public partial class VolunteerCapability : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VolunteerId;
		
		private int _JobId;
		
		private EntityRef<Job> _Job;
		
		private EntityRef<Volunteer> _Volunteer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVolunteerIdChanging(int value);
    partial void OnVolunteerIdChanged();
    partial void OnJobIdChanging(int value);
    partial void OnJobIdChanged();
    #endregion
		
		public VolunteerCapability()
		{
			this._Job = default(EntityRef<Job>);
			this._Volunteer = default(EntityRef<Volunteer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolunteerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VolunteerId
		{
			get
			{
				return this._VolunteerId;
			}
			set
			{
				if ((this._VolunteerId != value))
				{
					if (this._Volunteer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVolunteerIdChanging(value);
					this.SendPropertyChanging();
					this._VolunteerId = value;
					this.SendPropertyChanged("VolunteerId");
					this.OnVolunteerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_VolunteerCapability", Storage="_Job", ThisKey="JobId", OtherKey="JobId", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.VolunteerCapabilities.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.VolunteerCapabilities.Add(this);
						this._JobId = value.JobId;
					}
					else
					{
						this._JobId = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Volunteer_VolunteerCapability", Storage="_Volunteer", ThisKey="VolunteerId", OtherKey="VolunteerId", IsForeignKey=true)]
		public Volunteer Volunteer
		{
			get
			{
				return this._Volunteer.Entity;
			}
			set
			{
				Volunteer previousValue = this._Volunteer.Entity;
				if (((previousValue != value) 
							|| (this._Volunteer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Volunteer.Entity = null;
						previousValue.VolunteerCapabilities.Remove(this);
					}
					this._Volunteer.Entity = value;
					if ((value != null))
					{
						value.VolunteerCapabilities.Add(this);
						this._VolunteerId = value.VolunteerId;
					}
					else
					{
						this._VolunteerId = default(int);
					}
					this.SendPropertyChanged("Volunteer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseId;
		
		private string _CourseTypeCode;
		
		private System.Nullable<int> _TermId;
		
		private System.Nullable<int> _Year;
		
		private EntitySet<CourseAttendance> _CourseAttendances;
		
		private EntitySet<CourseVolunteer> _CourseVolunteers;
		
		private EntityRef<CourseType> _CourseType;
		
		private EntityRef<Term> _Term;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnCourseTypeCodeChanging(string value);
    partial void OnCourseTypeCodeChanged();
    partial void OnTermIdChanging(System.Nullable<int> value);
    partial void OnTermIdChanged();
    partial void OnYearChanging(System.Nullable<int> value);
    partial void OnYearChanged();
    #endregion
		
		public Course()
		{
			this._CourseAttendances = new EntitySet<CourseAttendance>(new Action<CourseAttendance>(this.attach_CourseAttendances), new Action<CourseAttendance>(this.detach_CourseAttendances));
			this._CourseVolunteers = new EntitySet<CourseVolunteer>(new Action<CourseVolunteer>(this.attach_CourseVolunteers), new Action<CourseVolunteer>(this.detach_CourseVolunteers));
			this._CourseType = default(EntityRef<CourseType>);
			this._Term = default(EntityRef<Term>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseTypeCode", DbType="VarChar(8)")]
		public string CourseTypeCode
		{
			get
			{
				return this._CourseTypeCode;
			}
			set
			{
				if ((this._CourseTypeCode != value))
				{
					if (this._CourseType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._CourseTypeCode = value;
					this.SendPropertyChanged("CourseTypeCode");
					this.OnCourseTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermId", DbType="Int")]
		public System.Nullable<int> TermId
		{
			get
			{
				return this._TermId;
			}
			set
			{
				if ((this._TermId != value))
				{
					if (this._Term.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTermIdChanging(value);
					this.SendPropertyChanging();
					this._TermId = value;
					this.SendPropertyChanged("TermId");
					this.OnTermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseAttendance", Storage="_CourseAttendances", ThisKey="CourseId", OtherKey="CourseId")]
		public EntitySet<CourseAttendance> CourseAttendances
		{
			get
			{
				return this._CourseAttendances;
			}
			set
			{
				this._CourseAttendances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseVolunteer", Storage="_CourseVolunteers", ThisKey="CourseId", OtherKey="CourseId")]
		public EntitySet<CourseVolunteer> CourseVolunteers
		{
			get
			{
				return this._CourseVolunteers;
			}
			set
			{
				this._CourseVolunteers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseType_Course", Storage="_CourseType", ThisKey="CourseTypeCode", OtherKey="CourseTypeCode", IsForeignKey=true)]
		public CourseType CourseType
		{
			get
			{
				return this._CourseType.Entity;
			}
			set
			{
				CourseType previousValue = this._CourseType.Entity;
				if (((previousValue != value) 
							|| (this._CourseType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseType.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._CourseType.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._CourseTypeCode = value.CourseTypeCode;
					}
					else
					{
						this._CourseTypeCode = default(string);
					}
					this.SendPropertyChanged("CourseType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Term_Course", Storage="_Term", ThisKey="TermId", OtherKey="TermId", IsForeignKey=true)]
		public Term Term
		{
			get
			{
				return this._Term.Entity;
			}
			set
			{
				Term previousValue = this._Term.Entity;
				if (((previousValue != value) 
							|| (this._Term.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Term.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Term.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._TermId = value.TermId;
					}
					else
					{
						this._TermId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Term");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseAttendances(CourseAttendance entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CourseAttendances(CourseAttendance entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_CourseVolunteers(CourseVolunteer entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CourseVolunteers(CourseVolunteer entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseAttendance")]
	public partial class CourseAttendance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChildId;
		
		private int _CourseId;
		
		private System.Nullable<bool> _Completed;
		
		private EntityRef<Child> _Child;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChildIdChanging(int value);
    partial void OnChildIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnCompletedChanging(System.Nullable<bool> value);
    partial void OnCompletedChanged();
    #endregion
		
		public CourseAttendance()
		{
			this._Child = default(EntityRef<Child>);
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ChildId
		{
			get
			{
				return this._ChildId;
			}
			set
			{
				if ((this._ChildId != value))
				{
					if (this._Child.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildIdChanging(value);
					this.SendPropertyChanging();
					this._ChildId = value;
					this.SendPropertyChanged("ChildId");
					this.OnChildIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Completed", DbType="Bit")]
		public System.Nullable<bool> Completed
		{
			get
			{
				return this._Completed;
			}
			set
			{
				if ((this._Completed != value))
				{
					this.OnCompletedChanging(value);
					this.SendPropertyChanging();
					this._Completed = value;
					this.SendPropertyChanged("Completed");
					this.OnCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Child_CourseAttendance", Storage="_Child", ThisKey="ChildId", OtherKey="ChildId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Child Child
		{
			get
			{
				return this._Child.Entity;
			}
			set
			{
				Child previousValue = this._Child.Entity;
				if (((previousValue != value) 
							|| (this._Child.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Child.Entity = null;
						previousValue.CourseAttendances.Remove(this);
					}
					this._Child.Entity = value;
					if ((value != null))
					{
						value.CourseAttendances.Add(this);
						this._ChildId = value.ChildId;
					}
					else
					{
						this._ChildId = default(int);
					}
					this.SendPropertyChanged("Child");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseAttendance", Storage="_Course", ThisKey="CourseId", OtherKey="CourseId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CourseAttendances.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CourseAttendances.Add(this);
						this._CourseId = value.CourseId;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseType")]
	public partial class CourseType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CourseTypeCode;
		
		private string _CourseTypeName;
		
		private EntitySet<Course> _Courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseTypeCodeChanging(string value);
    partial void OnCourseTypeCodeChanged();
    partial void OnCourseTypeNameChanging(string value);
    partial void OnCourseTypeNameChanged();
    #endregion
		
		public CourseType()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseTypeCode", DbType="VarChar(8) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CourseTypeCode
		{
			get
			{
				return this._CourseTypeCode;
			}
			set
			{
				if ((this._CourseTypeCode != value))
				{
					this.OnCourseTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._CourseTypeCode = value;
					this.SendPropertyChanged("CourseTypeCode");
					this.OnCourseTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseTypeName", DbType="VarChar(64)")]
		public string CourseTypeName
		{
			get
			{
				return this._CourseTypeName;
			}
			set
			{
				if ((this._CourseTypeName != value))
				{
					this.OnCourseTypeNameChanging(value);
					this.SendPropertyChanging();
					this._CourseTypeName = value;
					this.SendPropertyChanged("CourseTypeName");
					this.OnCourseTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseType_Course", Storage="_Courses", ThisKey="CourseTypeCode", OtherKey="CourseTypeCode")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.CourseType = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.CourseType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseVolunteer")]
	public partial class CourseVolunteer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseId;
		
		private int _VolunteerId;
		
		private int _JobId;
		
		private string _Notes;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Job> _Job;
		
		private EntityRef<Volunteer> _Volunteer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnVolunteerIdChanging(int value);
    partial void OnVolunteerIdChanged();
    partial void OnJobIdChanging(int value);
    partial void OnJobIdChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public CourseVolunteer()
		{
			this._Course = default(EntityRef<Course>);
			this._Job = default(EntityRef<Job>);
			this._Volunteer = default(EntityRef<Volunteer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolunteerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VolunteerId
		{
			get
			{
				return this._VolunteerId;
			}
			set
			{
				if ((this._VolunteerId != value))
				{
					if (this._Volunteer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVolunteerIdChanging(value);
					this.SendPropertyChanging();
					this._VolunteerId = value;
					this.SendPropertyChanged("VolunteerId");
					this.OnVolunteerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(2048)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseVolunteer", Storage="_Course", ThisKey="CourseId", OtherKey="CourseId", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CourseVolunteers.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CourseVolunteers.Add(this);
						this._CourseId = value.CourseId;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_CourseVolunteer", Storage="_Job", ThisKey="JobId", OtherKey="JobId", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.CourseVolunteers.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.CourseVolunteers.Add(this);
						this._JobId = value.JobId;
					}
					else
					{
						this._JobId = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Volunteer_CourseVolunteer", Storage="_Volunteer", ThisKey="VolunteerId", OtherKey="VolunteerId", IsForeignKey=true)]
		public Volunteer Volunteer
		{
			get
			{
				return this._Volunteer.Entity;
			}
			set
			{
				Volunteer previousValue = this._Volunteer.Entity;
				if (((previousValue != value) 
							|| (this._Volunteer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Volunteer.Entity = null;
						previousValue.CourseVolunteers.Remove(this);
					}
					this._Volunteer.Entity = value;
					if ((value != null))
					{
						value.CourseVolunteers.Add(this);
						this._VolunteerId = value.VolunteerId;
					}
					else
					{
						this._VolunteerId = default(int);
					}
					this.SendPropertyChanged("Volunteer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CrbCheck")]
	public partial class CrbCheck : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CrbCheckId;
		
		private System.Nullable<int> _VolunteerId;
		
		private System.Nullable<System.DateTime> _CheckDate;
		
		private string _CrbNumber;
		
		private System.Nullable<System.DateTime> _OnlineFormSent;
		
		private System.Nullable<System.DateTime> _FormFilledOut;
		
		private System.Nullable<System.DateTime> _DateCheckExpires;
		
		private System.Nullable<System.DateTime> _IdComplete;
		
		private EntityRef<Volunteer> _Volunteer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCrbCheckIdChanging(int value);
    partial void OnCrbCheckIdChanged();
    partial void OnVolunteerIdChanging(System.Nullable<int> value);
    partial void OnVolunteerIdChanged();
    partial void OnCheckDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCheckDateChanged();
    partial void OnCrbNumberChanging(string value);
    partial void OnCrbNumberChanged();
    partial void OnOnlineFormSentChanging(System.Nullable<System.DateTime> value);
    partial void OnOnlineFormSentChanged();
    partial void OnFormFilledOutChanging(System.Nullable<System.DateTime> value);
    partial void OnFormFilledOutChanged();
    partial void OnDateCheckExpiresChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCheckExpiresChanged();
    partial void OnIdCompleteChanging(System.Nullable<System.DateTime> value);
    partial void OnIdCompleteChanged();
    #endregion
		
		public CrbCheck()
		{
			this._Volunteer = default(EntityRef<Volunteer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrbCheckId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CrbCheckId
		{
			get
			{
				return this._CrbCheckId;
			}
			set
			{
				if ((this._CrbCheckId != value))
				{
					this.OnCrbCheckIdChanging(value);
					this.SendPropertyChanging();
					this._CrbCheckId = value;
					this.SendPropertyChanged("CrbCheckId");
					this.OnCrbCheckIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolunteerId", DbType="Int")]
		public System.Nullable<int> VolunteerId
		{
			get
			{
				return this._VolunteerId;
			}
			set
			{
				if ((this._VolunteerId != value))
				{
					if (this._Volunteer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVolunteerIdChanging(value);
					this.SendPropertyChanging();
					this._VolunteerId = value;
					this.SendPropertyChanged("VolunteerId");
					this.OnVolunteerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CheckDate
		{
			get
			{
				return this._CheckDate;
			}
			set
			{
				if ((this._CheckDate != value))
				{
					this.OnCheckDateChanging(value);
					this.SendPropertyChanging();
					this._CheckDate = value;
					this.SendPropertyChanged("CheckDate");
					this.OnCheckDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrbNumber", DbType="VarChar(32)")]
		public string CrbNumber
		{
			get
			{
				return this._CrbNumber;
			}
			set
			{
				if ((this._CrbNumber != value))
				{
					this.OnCrbNumberChanging(value);
					this.SendPropertyChanging();
					this._CrbNumber = value;
					this.SendPropertyChanged("CrbNumber");
					this.OnCrbNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnlineFormSent", DbType="DateTime")]
		public System.Nullable<System.DateTime> OnlineFormSent
		{
			get
			{
				return this._OnlineFormSent;
			}
			set
			{
				if ((this._OnlineFormSent != value))
				{
					this.OnOnlineFormSentChanging(value);
					this.SendPropertyChanging();
					this._OnlineFormSent = value;
					this.SendPropertyChanged("OnlineFormSent");
					this.OnOnlineFormSentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormFilledOut", DbType="DateTime")]
		public System.Nullable<System.DateTime> FormFilledOut
		{
			get
			{
				return this._FormFilledOut;
			}
			set
			{
				if ((this._FormFilledOut != value))
				{
					this.OnFormFilledOutChanging(value);
					this.SendPropertyChanging();
					this._FormFilledOut = value;
					this.SendPropertyChanged("FormFilledOut");
					this.OnFormFilledOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCheckExpires", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCheckExpires
		{
			get
			{
				return this._DateCheckExpires;
			}
			set
			{
				if ((this._DateCheckExpires != value))
				{
					this.OnDateCheckExpiresChanging(value);
					this.SendPropertyChanging();
					this._DateCheckExpires = value;
					this.SendPropertyChanged("DateCheckExpires");
					this.OnDateCheckExpiresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdComplete", DbType="DateTime")]
		public System.Nullable<System.DateTime> IdComplete
		{
			get
			{
				return this._IdComplete;
			}
			set
			{
				if ((this._IdComplete != value))
				{
					this.OnIdCompleteChanging(value);
					this.SendPropertyChanging();
					this._IdComplete = value;
					this.SendPropertyChanged("IdComplete");
					this.OnIdCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Volunteer_CrbCheck", Storage="_Volunteer", ThisKey="VolunteerId", OtherKey="VolunteerId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Volunteer Volunteer
		{
			get
			{
				return this._Volunteer.Entity;
			}
			set
			{
				Volunteer previousValue = this._Volunteer.Entity;
				if (((previousValue != value) 
							|| (this._Volunteer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Volunteer.Entity = null;
						previousValue.CrbChecks.Remove(this);
					}
					this._Volunteer.Entity = value;
					if ((value != null))
					{
						value.CrbChecks.Add(this);
						this._VolunteerId = value.VolunteerId;
					}
					else
					{
						this._VolunteerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Volunteer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Job")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobId;
		
		private string _Description;
		
		private EntitySet<VolunteerCapability> _VolunteerCapabilities;
		
		private EntitySet<CourseVolunteer> _CourseVolunteers;
		
		private EntitySet<PlayVolunteer> _PlayVolunteers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIdChanging(int value);
    partial void OnJobIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Job()
		{
			this._VolunteerCapabilities = new EntitySet<VolunteerCapability>(new Action<VolunteerCapability>(this.attach_VolunteerCapabilities), new Action<VolunteerCapability>(this.detach_VolunteerCapabilities));
			this._CourseVolunteers = new EntitySet<CourseVolunteer>(new Action<CourseVolunteer>(this.attach_CourseVolunteers), new Action<CourseVolunteer>(this.detach_CourseVolunteers));
			this._PlayVolunteers = new EntitySet<PlayVolunteer>(new Action<PlayVolunteer>(this.attach_PlayVolunteers), new Action<PlayVolunteer>(this.detach_PlayVolunteers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(64)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_VolunteerCapability", Storage="_VolunteerCapabilities", ThisKey="JobId", OtherKey="JobId")]
		public EntitySet<VolunteerCapability> VolunteerCapabilities
		{
			get
			{
				return this._VolunteerCapabilities;
			}
			set
			{
				this._VolunteerCapabilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_CourseVolunteer", Storage="_CourseVolunteers", ThisKey="JobId", OtherKey="JobId")]
		public EntitySet<CourseVolunteer> CourseVolunteers
		{
			get
			{
				return this._CourseVolunteers;
			}
			set
			{
				this._CourseVolunteers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_PlayVolunteer", Storage="_PlayVolunteers", ThisKey="JobId", OtherKey="JobId")]
		public EntitySet<PlayVolunteer> PlayVolunteers
		{
			get
			{
				return this._PlayVolunteers;
			}
			set
			{
				this._PlayVolunteers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VolunteerCapabilities(VolunteerCapability entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_VolunteerCapabilities(VolunteerCapability entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
		
		private void attach_CourseVolunteers(CourseVolunteer entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_CourseVolunteers(CourseVolunteer entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
		
		private void attach_PlayVolunteers(PlayVolunteer entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_PlayVolunteers(PlayVolunteer entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Performance")]
	public partial class Performance
	{
		
		private System.Nullable<int> _PerformanceId;
		
		private System.Nullable<int> _ProductionId;
		
		private System.Nullable<System.DateTime> _PerformanceDateTime;
		
		private string _EventBriteId;
		
		public Performance()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerformanceId", DbType="Int")]
		public System.Nullable<int> PerformanceId
		{
			get
			{
				return this._PerformanceId;
			}
			set
			{
				if ((this._PerformanceId != value))
				{
					this._PerformanceId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductionId", DbType="Int")]
		public System.Nullable<int> ProductionId
		{
			get
			{
				return this._ProductionId;
			}
			set
			{
				if ((this._ProductionId != value))
				{
					this._ProductionId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerformanceDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> PerformanceDateTime
		{
			get
			{
				return this._PerformanceDateTime;
			}
			set
			{
				if ((this._PerformanceDateTime != value))
				{
					this._PerformanceDateTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventBriteId", DbType="VarChar(64)")]
		public string EventBriteId
		{
			get
			{
				return this._EventBriteId;
			}
			set
			{
				if ((this._EventBriteId != value))
				{
					this._EventBriteId = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Play")]
	public partial class Play : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayId;
		
		private int _ChildId;
		
		private string _Title;
		
		private EntitySet<PlayVolunteer> _PlayVolunteers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayIdChanging(int value);
    partial void OnPlayIdChanged();
    partial void OnChildIdChanging(int value);
    partial void OnChildIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Play()
		{
			this._PlayVolunteers = new EntitySet<PlayVolunteer>(new Action<PlayVolunteer>(this.attach_PlayVolunteers), new Action<PlayVolunteer>(this.detach_PlayVolunteers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlayId
		{
			get
			{
				return this._PlayId;
			}
			set
			{
				if ((this._PlayId != value))
				{
					this.OnPlayIdChanging(value);
					this.SendPropertyChanging();
					this._PlayId = value;
					this.SendPropertyChanged("PlayId");
					this.OnPlayIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildId", DbType="Int NOT NULL")]
		public int ChildId
		{
			get
			{
				return this._ChildId;
			}
			set
			{
				if ((this._ChildId != value))
				{
					this.OnChildIdChanging(value);
					this.SendPropertyChanging();
					this._ChildId = value;
					this.SendPropertyChanged("ChildId");
					this.OnChildIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(128)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Play_PlayVolunteer", Storage="_PlayVolunteers", ThisKey="PlayId", OtherKey="PlayId")]
		public EntitySet<PlayVolunteer> PlayVolunteers
		{
			get
			{
				return this._PlayVolunteers;
			}
			set
			{
				this._PlayVolunteers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayVolunteers(PlayVolunteer entity)
		{
			this.SendPropertyChanging();
			entity.Play = this;
		}
		
		private void detach_PlayVolunteers(PlayVolunteer entity)
		{
			this.SendPropertyChanging();
			entity.Play = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayVolunteer")]
	public partial class PlayVolunteer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayId;
		
		private int _VolunteerId;
		
		private int _JobId;
		
		private string _Notes;
		
		private EntityRef<Job> _Job;
		
		private EntityRef<Play> _Play;
		
		private EntityRef<Volunteer> _Volunteer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayIdChanging(int value);
    partial void OnPlayIdChanged();
    partial void OnVolunteerIdChanging(int value);
    partial void OnVolunteerIdChanged();
    partial void OnJobIdChanging(int value);
    partial void OnJobIdChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public PlayVolunteer()
		{
			this._Job = default(EntityRef<Job>);
			this._Play = default(EntityRef<Play>);
			this._Volunteer = default(EntityRef<Volunteer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayId
		{
			get
			{
				return this._PlayId;
			}
			set
			{
				if ((this._PlayId != value))
				{
					if (this._Play.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayIdChanging(value);
					this.SendPropertyChanging();
					this._PlayId = value;
					this.SendPropertyChanged("PlayId");
					this.OnPlayIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolunteerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VolunteerId
		{
			get
			{
				return this._VolunteerId;
			}
			set
			{
				if ((this._VolunteerId != value))
				{
					if (this._Volunteer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVolunteerIdChanging(value);
					this.SendPropertyChanging();
					this._VolunteerId = value;
					this.SendPropertyChanged("VolunteerId");
					this.OnVolunteerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(2048)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_PlayVolunteer", Storage="_Job", ThisKey="JobId", OtherKey="JobId", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.PlayVolunteers.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.PlayVolunteers.Add(this);
						this._JobId = value.JobId;
					}
					else
					{
						this._JobId = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Play_PlayVolunteer", Storage="_Play", ThisKey="PlayId", OtherKey="PlayId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Play Play
		{
			get
			{
				return this._Play.Entity;
			}
			set
			{
				Play previousValue = this._Play.Entity;
				if (((previousValue != value) 
							|| (this._Play.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Play.Entity = null;
						previousValue.PlayVolunteers.Remove(this);
					}
					this._Play.Entity = value;
					if ((value != null))
					{
						value.PlayVolunteers.Add(this);
						this._PlayId = value.PlayId;
					}
					else
					{
						this._PlayId = default(int);
					}
					this.SendPropertyChanged("Play");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Volunteer_PlayVolunteer", Storage="_Volunteer", ThisKey="VolunteerId", OtherKey="VolunteerId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Volunteer Volunteer
		{
			get
			{
				return this._Volunteer.Entity;
			}
			set
			{
				Volunteer previousValue = this._Volunteer.Entity;
				if (((previousValue != value) 
							|| (this._Volunteer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Volunteer.Entity = null;
						previousValue.PlayVolunteers.Remove(this);
					}
					this._Volunteer.Entity = value;
					if ((value != null))
					{
						value.PlayVolunteers.Add(this);
						this._VolunteerId = value.VolunteerId;
					}
					else
					{
						this._VolunteerId = default(int);
					}
					this.SendPropertyChanged("Volunteer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Production")]
	public partial class Production : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductionId;
		
		private string _Title;
		
		private EntitySet<ProductionVolunteer> _ProductionVolunteers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductionIdChanging(int value);
    partial void OnProductionIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Production()
		{
			this._ProductionVolunteers = new EntitySet<ProductionVolunteer>(new Action<ProductionVolunteer>(this.attach_ProductionVolunteers), new Action<ProductionVolunteer>(this.detach_ProductionVolunteers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductionId
		{
			get
			{
				return this._ProductionId;
			}
			set
			{
				if ((this._ProductionId != value))
				{
					this.OnProductionIdChanging(value);
					this.SendPropertyChanging();
					this._ProductionId = value;
					this.SendPropertyChanged("ProductionId");
					this.OnProductionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(64)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Production_ProductionVolunteer", Storage="_ProductionVolunteers", ThisKey="ProductionId", OtherKey="ProductionId")]
		public EntitySet<ProductionVolunteer> ProductionVolunteers
		{
			get
			{
				return this._ProductionVolunteers;
			}
			set
			{
				this._ProductionVolunteers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductionVolunteers(ProductionVolunteer entity)
		{
			this.SendPropertyChanging();
			entity.Production = this;
		}
		
		private void detach_ProductionVolunteers(ProductionVolunteer entity)
		{
			this.SendPropertyChanging();
			entity.Production = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductionVolunteer")]
	public partial class ProductionVolunteer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VounteerId;
		
		private int _JobId;
		
		private int _ProductionId;
		
		private string _Notes;
		
		private EntityRef<Production> _Production;
		
		private EntityRef<Volunteer> _Volunteer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVounteerIdChanging(int value);
    partial void OnVounteerIdChanged();
    partial void OnJobIdChanging(int value);
    partial void OnJobIdChanged();
    partial void OnProductionIdChanging(int value);
    partial void OnProductionIdChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public ProductionVolunteer()
		{
			this._Production = default(EntityRef<Production>);
			this._Volunteer = default(EntityRef<Volunteer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VounteerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VounteerId
		{
			get
			{
				return this._VounteerId;
			}
			set
			{
				if ((this._VounteerId != value))
				{
					if (this._Volunteer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVounteerIdChanging(value);
					this.SendPropertyChanging();
					this._VounteerId = value;
					this.SendPropertyChanged("VounteerId");
					this.OnVounteerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductionId
		{
			get
			{
				return this._ProductionId;
			}
			set
			{
				if ((this._ProductionId != value))
				{
					if (this._Production.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductionIdChanging(value);
					this.SendPropertyChanging();
					this._ProductionId = value;
					this.SendPropertyChanged("ProductionId");
					this.OnProductionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(2048)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Production_ProductionVolunteer", Storage="_Production", ThisKey="ProductionId", OtherKey="ProductionId", IsForeignKey=true)]
		public Production Production
		{
			get
			{
				return this._Production.Entity;
			}
			set
			{
				Production previousValue = this._Production.Entity;
				if (((previousValue != value) 
							|| (this._Production.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Production.Entity = null;
						previousValue.ProductionVolunteers.Remove(this);
					}
					this._Production.Entity = value;
					if ((value != null))
					{
						value.ProductionVolunteers.Add(this);
						this._ProductionId = value.ProductionId;
					}
					else
					{
						this._ProductionId = default(int);
					}
					this.SendPropertyChanged("Production");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Volunteer_ProductionVolunteer", Storage="_Volunteer", ThisKey="VounteerId", OtherKey="VolunteerId", IsForeignKey=true)]
		public Volunteer Volunteer
		{
			get
			{
				return this._Volunteer.Entity;
			}
			set
			{
				Volunteer previousValue = this._Volunteer.Entity;
				if (((previousValue != value) 
							|| (this._Volunteer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Volunteer.Entity = null;
						previousValue.ProductionVolunteers.Remove(this);
					}
					this._Volunteer.Entity = value;
					if ((value != null))
					{
						value.ProductionVolunteers.Add(this);
						this._VounteerId = value.VolunteerId;
					}
					else
					{
						this._VounteerId = default(int);
					}
					this.SendPropertyChanged("Volunteer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Term")]
	public partial class Term : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TermId;
		
		private string _TermName;
		
		private EntitySet<Course> _Courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTermIdChanging(int value);
    partial void OnTermIdChanged();
    partial void OnTermNameChanging(string value);
    partial void OnTermNameChanged();
    #endregion
		
		public Term()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TermId
		{
			get
			{
				return this._TermId;
			}
			set
			{
				if ((this._TermId != value))
				{
					this.OnTermIdChanging(value);
					this.SendPropertyChanging();
					this._TermId = value;
					this.SendPropertyChanged("TermId");
					this.OnTermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermName", DbType="VarChar(16)")]
		public string TermName
		{
			get
			{
				return this._TermName;
			}
			set
			{
				if ((this._TermName != value))
				{
					this.OnTermNameChanging(value);
					this.SendPropertyChanging();
					this._TermName = value;
					this.SendPropertyChanged("TermName");
					this.OnTermNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Term_Course", Storage="_Courses", ThisKey="TermId", OtherKey="TermId")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Term = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Term = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Volunteer")]
	public partial class Volunteer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VolunteerId;
		
		private string _FirstName;
		
		private string _Surname;
		
		private EntitySet<VolunteerCapability> _VolunteerCapabilities;
		
		private EntitySet<CourseVolunteer> _CourseVolunteers;
		
		private EntitySet<CrbCheck> _CrbChecks;
		
		private EntitySet<PlayVolunteer> _PlayVolunteers;
		
		private EntitySet<ProductionVolunteer> _ProductionVolunteers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVolunteerIdChanging(int value);
    partial void OnVolunteerIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    #endregion
		
		public Volunteer()
		{
			this._VolunteerCapabilities = new EntitySet<VolunteerCapability>(new Action<VolunteerCapability>(this.attach_VolunteerCapabilities), new Action<VolunteerCapability>(this.detach_VolunteerCapabilities));
			this._CourseVolunteers = new EntitySet<CourseVolunteer>(new Action<CourseVolunteer>(this.attach_CourseVolunteers), new Action<CourseVolunteer>(this.detach_CourseVolunteers));
			this._CrbChecks = new EntitySet<CrbCheck>(new Action<CrbCheck>(this.attach_CrbChecks), new Action<CrbCheck>(this.detach_CrbChecks));
			this._PlayVolunteers = new EntitySet<PlayVolunteer>(new Action<PlayVolunteer>(this.attach_PlayVolunteers), new Action<PlayVolunteer>(this.detach_PlayVolunteers));
			this._ProductionVolunteers = new EntitySet<ProductionVolunteer>(new Action<ProductionVolunteer>(this.attach_ProductionVolunteers), new Action<ProductionVolunteer>(this.detach_ProductionVolunteers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolunteerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VolunteerId
		{
			get
			{
				return this._VolunteerId;
			}
			set
			{
				if ((this._VolunteerId != value))
				{
					this.OnVolunteerIdChanging(value);
					this.SendPropertyChanging();
					this._VolunteerId = value;
					this.SendPropertyChanged("VolunteerId");
					this.OnVolunteerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(64)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(64)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Volunteer_VolunteerCapability", Storage="_VolunteerCapabilities", ThisKey="VolunteerId", OtherKey="VolunteerId")]
		public EntitySet<VolunteerCapability> VolunteerCapabilities
		{
			get
			{
				return this._VolunteerCapabilities;
			}
			set
			{
				this._VolunteerCapabilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Volunteer_CourseVolunteer", Storage="_CourseVolunteers", ThisKey="VolunteerId", OtherKey="VolunteerId")]
		public EntitySet<CourseVolunteer> CourseVolunteers
		{
			get
			{
				return this._CourseVolunteers;
			}
			set
			{
				this._CourseVolunteers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Volunteer_CrbCheck", Storage="_CrbChecks", ThisKey="VolunteerId", OtherKey="VolunteerId")]
		public EntitySet<CrbCheck> CrbChecks
		{
			get
			{
				return this._CrbChecks;
			}
			set
			{
				this._CrbChecks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Volunteer_PlayVolunteer", Storage="_PlayVolunteers", ThisKey="VolunteerId", OtherKey="VolunteerId")]
		public EntitySet<PlayVolunteer> PlayVolunteers
		{
			get
			{
				return this._PlayVolunteers;
			}
			set
			{
				this._PlayVolunteers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Volunteer_ProductionVolunteer", Storage="_ProductionVolunteers", ThisKey="VolunteerId", OtherKey="VounteerId")]
		public EntitySet<ProductionVolunteer> ProductionVolunteers
		{
			get
			{
				return this._ProductionVolunteers;
			}
			set
			{
				this._ProductionVolunteers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VolunteerCapabilities(VolunteerCapability entity)
		{
			this.SendPropertyChanging();
			entity.Volunteer = this;
		}
		
		private void detach_VolunteerCapabilities(VolunteerCapability entity)
		{
			this.SendPropertyChanging();
			entity.Volunteer = null;
		}
		
		private void attach_CourseVolunteers(CourseVolunteer entity)
		{
			this.SendPropertyChanging();
			entity.Volunteer = this;
		}
		
		private void detach_CourseVolunteers(CourseVolunteer entity)
		{
			this.SendPropertyChanging();
			entity.Volunteer = null;
		}
		
		private void attach_CrbChecks(CrbCheck entity)
		{
			this.SendPropertyChanging();
			entity.Volunteer = this;
		}
		
		private void detach_CrbChecks(CrbCheck entity)
		{
			this.SendPropertyChanging();
			entity.Volunteer = null;
		}
		
		private void attach_PlayVolunteers(PlayVolunteer entity)
		{
			this.SendPropertyChanging();
			entity.Volunteer = this;
		}
		
		private void detach_PlayVolunteers(PlayVolunteer entity)
		{
			this.SendPropertyChanging();
			entity.Volunteer = null;
		}
		
		private void attach_ProductionVolunteers(ProductionVolunteer entity)
		{
			this.SendPropertyChanging();
			entity.Volunteer = this;
		}
		
		private void detach_ProductionVolunteers(ProductionVolunteer entity)
		{
			this.SendPropertyChanging();
			entity.Volunteer = null;
		}
	}
}
#pragma warning restore 1591
